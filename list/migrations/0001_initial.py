# Generated by Django 5.0.2 on 2024-03-15 12:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=800)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=320)),
                ('authors', models.ManyToManyField(blank=True, to='list.author')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=320)),
                ('info', models.CharField(blank=True, max_length=960)),
                ('url', models.URLField(blank=True, max_length=560)),
                ('credibility', models.PositiveIntegerField(default=3)),
                ('book_num', models.PositiveIntegerField(default=10)),
                ('places_matter', models.BooleanField()),
                ('slug', models.SlugField(blank=True, max_length=250, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Book_In_List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('info', models.CharField(blank=True, max_length=960)),
                ('place', models.PositiveIntegerField(default=1)),
                ('rating', models.PositiveIntegerField(default=0)),
                ('atom_count', models.PositiveIntegerField(default=0)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='list.book')),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='list.list')),
            ],
        ),
        migrations.CreateModel(
            name='Author_In_List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='list.author')),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='list.list')),
            ],
        ),
        migrations.CreateModel(
            name='Master',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=960)),
                ('time', models.DateTimeField(auto_now_add=True, null=True)),
                ('slug', models.SlugField(blank=True, max_length=250, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='list',
            name='masters',
            field=models.ManyToManyField(blank=True, to='list.master'),
        ),
        migrations.CreateModel(
            name='Book_In_Master',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(default=0)),
                ('place', models.IntegerField(default=1)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='list.book')),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='list.master')),
            ],
        ),
        migrations.CreateModel(
            name='Author_In_Master',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(default=0)),
                ('place', models.IntegerField(default=1)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='list.author')),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='list.master')),
            ],
        ),
        migrations.AddConstraint(
            model_name='author',
            constraint=models.UniqueConstraint(fields=('name', 'user'), name='User can only create one author with this name'),
        ),
        migrations.AddConstraint(
            model_name='book',
            constraint=models.UniqueConstraint(fields=('title', 'user'), name='User can only create one book with this title'),
        ),
        migrations.AddConstraint(
            model_name='book_in_list',
            constraint=models.UniqueConstraint(fields=('book', 'list'), name='book once in a list'),
        ),
        migrations.AddConstraint(
            model_name='author_in_list',
            constraint=models.UniqueConstraint(fields=('author', 'list'), name='author once in a list'),
        ),
        migrations.AddConstraint(
            model_name='master',
            constraint=models.UniqueConstraint(fields=('name', 'user'), name='User can only have one master with this name'),
        ),
        migrations.AddConstraint(
            model_name='master',
            constraint=models.UniqueConstraint(fields=('slug', 'user'), name='Slug for master - unique'),
        ),
        migrations.AddConstraint(
            model_name='list',
            constraint=models.UniqueConstraint(fields=('name', 'user'), name='User can only have one list with this name'),
        ),
        migrations.AddConstraint(
            model_name='list',
            constraint=models.UniqueConstraint(fields=('slug', 'user'), name='Slug for list - unique'),
        ),
        migrations.AddConstraint(
            model_name='book_in_master',
            constraint=models.UniqueConstraint(fields=('book', 'master'), name='book once in master'),
        ),
        migrations.AddConstraint(
            model_name='author_in_master',
            constraint=models.UniqueConstraint(fields=('author', 'master'), name='author once in a master'),
        ),
    ]
